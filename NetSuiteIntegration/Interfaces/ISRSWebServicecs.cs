using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NetSuiteIntegration.Interfaces
{
    public interface ISRSWebServicecs
    {
        //Utility methods

        /// <summary>
        /// Gets a GUID from the Unite API
        /// </summary>
        /// <returns></returns>
        Task<string?> GetGuid();

        /// <summary>
        /// Clears the session from the Unite API
        /// </summary>
        /// <param name="guid">The current GUID</param>
        /// <returns></returns>
        Task<bool> InvalidateSession(string guid);

        /// <summary>
        /// Exports a named report from the Unite API. The report must be configured in the Unite API first to be available
        /// and set to be exportable in the Wev API settings
        /// </summary>
        /// <typeparam name="T">A custom data model representing the expected return structure</typeparam>
        /// <param name="reportName">The name of the RepGen report</param>
        /// <returns></returns>

        Task<T?> ExportReport<T>(string reportName);

        /// <summary>
        /// Exports a named report from the Unite API. The report must be configured in the Unite API first to be available
        /// and set to be exportable in the Wev API settings
        /// </summary>
        /// <typeparam name="T">A custom data model representing the expected return structure</typeparam>
        /// <param name="reportName">The name of the RepGen report</param>
        /// <returns></returns>

        Task<T?> ExportReport<T>(string reportName, string? guid);

        /// <summary>
        /// Exports a named report from the Unite API. The report must be configured in the Unite API first to be available
        /// and set to be exportable in the Wev API settings
        /// </summary>
        /// <typeparam name="T">A custom data model representing the expected return structure</typeparam>
        /// <param name="reportName">The name of the RepGen report</param>
        /// <param name="guid">The current GUID</param>
        /// <returns></returns>

        Task<DataSet?> ExportReportDataSet(string reportName);

        //Generic methods
        /// <summary>
        /// Retrieves a record from the database based on the ID
        /// </summary>
        /// <typeparam name="T">Unit-e Business Class</typeparam>
        /// <param name="id">Unique id of the record</param>
        /// <returns>A record of the specified type, else null</returns>
        Task<T?> Get<T>(string id);
        /// <summary>
        /// Finds records based on a search parameter
        /// </summary>
        /// <typeparam name="T">Type to be returned as a list</typeparam>
        /// <typeparam name="U">Type for the find parameter</typeparam>
        /// <param name="FindParameter">Paramater containing the search criteria</param>
        /// <returns>A list of the specified type however that may contain no records if none found</returns>
        Task<List<T>> Find<T, U>(U FindParameter);
        /// <summary>
        /// Creates a blank class but does not yet insert it into the database
        /// </summary>
        /// <typeparam name="T">Unit-e Business Class</typeparam>
        /// <returns>A blank object of the specified type with a unique ID generated by Unit-e</returns>
        Task<T?> Create<T>();
        /// <summary>
        /// Inserts a previously created object into the database
        /// </summary>
        /// <typeparam name="T">Unit-e Business Class</typeparam>
        /// <param name="insert">Record previously created by the Create method</param>
        /// <returns></returns>
        Task<bool> Insert<T>(T insert);

        /// <summary>
        /// Updates a record in the database based on a previously retrieved record
        /// </summary>
        /// <typeparam name="T">Unit-e Business Class</typeparam>
        /// <param name="record">Previously retrieved record of the matching type</param>
        /// <returns>True on success, else false</returns>
        Task<bool> Update<T>(T record);

        /// <summary>
        /// Update just individual properties of a record. Does not require an original record but must include the ID
        /// </summary>
        /// <typeparam name="T">Unit-e Business Class of the record to be updated</typeparam>
        /// <typeparam name="U">Custom data model type representing just the updated fields and the ID</typeparam>
        /// <param name="record">Custom data model type representing just the updated fields and the ID</param>
        /// <returns>True on success, else false</returns>
        Task<bool> UpdateProperties<T, U>(U record);
    }
}
